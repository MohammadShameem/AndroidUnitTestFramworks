// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.zl.weilu.androidut.dagger.base.component;

import android.app.Activity;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import com.zl.weilu.androidut.MyApp;
import com.zl.weilu.androidut.MyApp_MembersInjector;
import com.zl.weilu.androidut.dagger.base.BaseMVPDaggerActivity_MembersInjector;
import com.zl.weilu.androidut.dagger.base.module.ClientModule;
import com.zl.weilu.androidut.dagger.base.module.ClientModule_ProvideClientBuilderFactory;
import com.zl.weilu.androidut.dagger.base.module.ClientModule_ProvideClientFactory;
import com.zl.weilu.androidut.dagger.base.module.ClientModule_ProvideGithubApiFactory;
import com.zl.weilu.androidut.dagger.base.module.ClientModule_ProvideLoggingInterceptorFactory;
import com.zl.weilu.androidut.dagger.base.module.ClientModule_ProvideRetrofitBuilderFactory;
import com.zl.weilu.androidut.dagger.base.module.ClientModule_ProvideRetrofitFactory;
import com.zl.weilu.androidut.dagger.ui.BuildersModule_LoginDaggerActivityInjector;
import com.zl.weilu.androidut.dagger.ui.LoginDaggerActivity;
import com.zl.weilu.androidut.dagger.ui.LoginDaggerPresenter;
import com.zl.weilu.androidut.dagger.ui.LoginDaggerPresenter_Factory;
import com.zl.weilu.androidut.net.GithubApi;
import com.zl.weilu.androidut.net.LoggingInterceptor;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<
          BuildersModule_LoginDaggerActivityInjector.LoginDaggerActivitySubcomponent.Builder>
      loginDaggerActivitySubcomponentBuilderProvider;

  private Provider<Retrofit.Builder> provideRetrofitBuilderProvider;

  private Provider<OkHttpClient.Builder> provideClientBuilderProvider;

  private Provider<LoggingInterceptor> provideLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<GithubApi> provideGithubApiProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(
                LoginDaggerActivity.class,
                (Provider) loginDaggerActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<android.support.v4.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends android.support.v4.app.Fragment>,
                Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
                emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.loginDaggerActivitySubcomponentBuilderProvider =
        new Provider<
            BuildersModule_LoginDaggerActivityInjector.LoginDaggerActivitySubcomponent.Builder>() {
          @Override
          public BuildersModule_LoginDaggerActivityInjector.LoginDaggerActivitySubcomponent.Builder
              get() {
            return new LoginDaggerActivitySubcomponentBuilder();
          }
        };
    this.provideRetrofitBuilderProvider =
        DoubleCheck.provider(
            ClientModule_ProvideRetrofitBuilderFactory.create(builder.clientModule));
    this.provideClientBuilderProvider =
        DoubleCheck.provider(ClientModule_ProvideClientBuilderFactory.create(builder.clientModule));
    this.provideLoggingInterceptorProvider =
        DoubleCheck.provider(
            ClientModule_ProvideLoggingInterceptorFactory.create(builder.clientModule));
    this.provideClientProvider =
        DoubleCheck.provider(
            ClientModule_ProvideClientFactory.create(
                builder.clientModule,
                provideClientBuilderProvider,
                provideLoggingInterceptorProvider));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            ClientModule_ProvideRetrofitFactory.create(
                builder.clientModule, provideRetrofitBuilderProvider, provideClientProvider));
    this.provideGithubApiProvider =
        DoubleCheck.provider(
            ClientModule_ProvideGithubApiFactory.create(
                builder.clientModule, provideRetrofitProvider));
  }

  @Override
  public void inject(MyApp arg0) {
    injectMyApp(arg0);
  }

  private MyApp injectMyApp(MyApp instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    MyApp_MembersInjector.injectMGithubApi(instance, provideGithubApiProvider.get());
    return instance;
  }

  private static final class Builder extends AppComponent.Builder {
    private ClientModule clientModule;

    private MyApp seedInstance;

    @Override
    public AppComponent build() {
      if (clientModule == null) {
        this.clientModule = new ClientModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MyApp.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public void seedInstance(MyApp arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class LoginDaggerActivitySubcomponentBuilder
      extends BuildersModule_LoginDaggerActivityInjector.LoginDaggerActivitySubcomponent.Builder {
    private LoginDaggerActivity seedInstance;

    @Override
    public BuildersModule_LoginDaggerActivityInjector.LoginDaggerActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            LoginDaggerActivity.class.getCanonicalName() + " must be set");
      }
      return new LoginDaggerActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(LoginDaggerActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class LoginDaggerActivitySubcomponentImpl
      implements BuildersModule_LoginDaggerActivityInjector.LoginDaggerActivitySubcomponent {
    private Provider<LoginDaggerPresenter> loginDaggerPresenterProvider;

    private LoginDaggerActivitySubcomponentImpl(LoginDaggerActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoginDaggerActivitySubcomponentBuilder builder) {
      this.loginDaggerPresenterProvider =
          DoubleCheck.provider(
              LoginDaggerPresenter_Factory.create(
                  DaggerAppComponent.this.provideGithubApiProvider));
    }

    @Override
    public void inject(LoginDaggerActivity arg0) {
      injectLoginDaggerActivity(arg0);
    }

    private LoginDaggerActivity injectLoginDaggerActivity(LoginDaggerActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      BaseMVPDaggerActivity_MembersInjector.injectMPresenter(
          instance, loginDaggerPresenterProvider.get());
      return instance;
    }
  }
}

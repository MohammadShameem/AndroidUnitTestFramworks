// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.zl.weilu.androidut.dagger.base.module;

import com.zl.weilu.androidut.net.LoggingInterceptor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class ClientModule_ProvideClientFactory implements Factory<OkHttpClient> {
  private final ClientModule module;

  private final Provider<OkHttpClient.Builder> okHttpClientProvider;

  private final Provider<LoggingInterceptor> loggingInterceptorProvider;

  public ClientModule_ProvideClientFactory(
      ClientModule module,
      Provider<OkHttpClient.Builder> okHttpClientProvider,
      Provider<LoggingInterceptor> loggingInterceptorProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
    this.loggingInterceptorProvider = loggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.provideClient(okHttpClientProvider.get(), loggingInterceptorProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<OkHttpClient> create(
      ClientModule module,
      Provider<OkHttpClient.Builder> okHttpClientProvider,
      Provider<LoggingInterceptor> loggingInterceptorProvider) {
    return new ClientModule_ProvideClientFactory(
        module, okHttpClientProvider, loggingInterceptorProvider);
  }

  public static OkHttpClient proxyProvideClient(
      ClientModule instance,
      OkHttpClient.Builder okHttpClient,
      LoggingInterceptor loggingInterceptor) {
    return instance.provideClient(okHttpClient, loggingInterceptor);
  }
}
